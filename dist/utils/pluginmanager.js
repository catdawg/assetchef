"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const ilogger_1 = require("../plugin/ilogger");
const fs_extra_1 = __importDefault(require("fs-extra"));
const npm_1 = __importDefault(require("npm"));
const pathutils = __importStar(require("path"));
const verror_1 = __importDefault(require("verror"));
const consoletologger_1 = require("./consoletologger");
class PluginManager {
    /**
     * Actual constructor of the plugin manager. Asynchrounous because we might need it some initial setup later.
     * @param logger the logger to be used by the plugin manager
     * @param path the path where to add the plugins
     */
    static setup(logger, path) {
        return __awaiter(this, void 0, void 0, function* () {
            if (path == null) {
                throw new verror_1.default("path can't be null");
            }
            if (logger == null) {
                throw new verror_1.default("logger can't be null");
            }
            return new PluginManager(logger, path);
        });
    }
    constructor(logger, path) {
        this.logger = logger;
        this.path = path;
    }
    /**
     * Install the libraries in the parameter. They can be required afterwards.
     * This currently uses npm underneath, so any errors npm would have, this will also have them.
     * Currently no support for native libraries.
     * @param libraries the list of libraries to install
     */
    install(libraries) {
        return __awaiter(this, void 0, void 0, function* () {
            const packageJsonPath = pathutils.join(this.path, "package.json");
            const dependencies = {};
            for (const lib of libraries) {
                dependencies[lib.name] = lib.version;
            }
            const packageJson = {
                name: "assetchef_autogenerated",
                version: "0.0.0",
                description: "auto generated",
                license: "MIT",
                repository: {},
                dependencies,
            };
            const packageJsonJson = JSON.stringify(packageJson);
            try {
                yield fs_extra_1.default.writeFile(packageJsonPath, packageJsonJson);
            }
            catch (e) {
                this.logger.logError("Failed to write plugins config file due to: %s", e);
                return false;
            }
            const consoleToLoggerCanceller = consoletologger_1.ConsoleToLogger.redirect(this.logger, ilogger_1.ILoggerLevel.info, ilogger_1.ILoggerLevel.info);
            try {
                yield new Promise((resolve, reject) => {
                    npm_1.default.load({ _exit: false, loglevel: "info", parseable: true }, (e) => {
                        /* istanbul ignore next */
                        if (e == null) {
                            resolve();
                        }
                        else {
                            /* istanbul ignore next */
                            reject(e);
                        }
                    });
                });
                yield new Promise((resolve, reject) => {
                    npm_1.default.commands.install(this.path, [], (e) => {
                        if (e == null) {
                            resolve();
                        }
                        else {
                            reject(e);
                        }
                    });
                });
            }
            catch (e) {
                consoleToLoggerCanceller.cancel();
                this.logger.logError("Npm failed to install plugins due to: %s", e);
                return false;
            }
            finally {
                consoleToLoggerCanceller.cancel();
            }
            return true;
        });
    }
    /**
     * Require a plugin. This will return null if it's not found, and log the error.
     * @param name the name of the plugin
     */
    require(name) {
        const prevPaths = module.paths;
        module.paths = [pathutils.join(this.path, "node_modules")];
        try {
            return require(name);
        }
        catch (e) {
            this.logger.logError("Failed to require %s with error: %s", name, e);
            return null;
        }
        finally {
            module.paths = prevPaths;
        }
    }
}
exports.PluginManager = PluginManager;
//# sourceMappingURL=pluginmanager.js.map